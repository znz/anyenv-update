#!/usr/bin/env bash
#
# Summary: Update all **env and all installed plugins.
#
# Usage: anyenv update [--force] [--verbose|--quiet|--noop] [--without-plugin] [<envs>]
#
#  -f/--force       Force update
#  -v/--verbose     Verbose mode: print downloading status to stdout
#  -q/--quiet       Quiet mode: no printing
#  -n/--noop        Noop mode: dry run and do nothing
#  --without-plugin Update envs, but not update plugin of each envs
#
# For detailed information, see: https://github.com/znz/anyenv-update
#
set -eo pipefail
[ -n "$ANYENV_DEBUG" ] && set -x

# Provide anyenv completions
if [ "$1" = "--complete" ]; then
  echo --force
  echo --verbose
  echo --quiet
  echo --noop
  echo --without-plugin
  echo anyenv
  exec anyenv-envs
fi

trap_handler() {
  kill %1
  exit 1
}

trap trap_handler SIGINT

usage () {
  anyenv-help update 2>/dev/null
  [ -z "$1" ] || exit "$1"
}

parse_options () {
  OPTIONS=()
  ARGUMENTS=()
  local arg option index

  for arg in "$@"; do
    if [ "${arg:0:1}" = "-" ]; then
      if [ "${arg:1:1}" = "-" ]; then
        OPTIONS[${#OPTIONS[*]}]="${arg:2}"
      else
        index=1
        while option="${arg:$index:1}"; do
          [ -n "$option" ] || break
          OPTIONS[${#OPTIONS[*]}]="$option"
          index=$((index+1))
        done
      fi
    else
      ARGUMENTS[${#ARGUMENTS[*]}]="$arg"
    fi
  done
}

indent_output() {
  while read -r data; do
    printf " ${color}|${reset}  %s\n" "$data"
  done
}

print_colored() {
  if [ -z "$QUIET" ]; then
    printf "${color}%s${reset}\n" "$1"
  fi
}

get_allenvs () {
  echo "anyenv $(anyenv-envs | tr '\n' ' ')"
}

git_currentbranch () {
  branch=$(command git branch | grep '^\*' | awk '{print $2}')
  echo "$branch"
}

git () {
  if [ -n "$NOOP" ]; then
    # dry run
    echo git "$@" | indent_output
  elif [ -n "$QUIET" ]; then
    # mute all
    command git "$@" &>/dev/null
  elif [ -n "$VERBOSE" ]; then
    # output all
    command git "$@" 2>&1 | indent_output
  else
    # output only stderr
    # shellcheck disable=SC2069
    command git "$@" 2>&1 >/dev/null | indent_output
  fi
}

print_use_forceopt () {
  if [ -z "$QUIET" ]; then
    printf " ${fail_color}|  %s${reset}\n" \
      "Failed to update. Use 'verbose' option for detailed, or 'force' option."
  fi
}

anyenv_update () {
  if [ -d .git ]; then
    print_colored "Updating '$1'..."
    if [ -n "$VERBOSE" ]; then
      echo "cd $(pwd)" | indent_output
    fi
    if [ -n "$FORCE" ]; then
      branch=$(git_currentbranch)
      git fetch --prune
      git checkout "$branch"
      git reset --hard "origin/$branch"
    else
      git pull --no-rebase --ff || print_use_forceopt
    fi
  else
    print_colored "Skipping '$1'; not git repo"
  fi
}

anyenv_update_plugins () {
  shopt -s nullglob
  for plugin in plugins/*; do
    pushd "$plugin" >/dev/null
    anyenv_update "$1/$(basename "$plugin")"
    popd >/dev/null
  done
  shopt -u nullglob
}

# Parse command line flags
FORCE=""
VERBOSE=""
QUIET=""
NOOP=""
WITHOUT_PLUGIN=""

parse_options "$@"
for option in "${OPTIONS[@]}"; do
  case "$option" in
  "h" | "help" )
    usage 0
    ;;
  "f" | "force" )
    FORCE=true
    ;;
  "v" | "verbose" )
    VERBOSE=true
    ;;
  "q" | "quiet" )
    QUIET=true
    ;;
  "n" | "noop" )
    NOOP=true
    ;;
  "without-plugin" )
    WITHOUT_PLUGIN=true
    ;;
  * )
    echo "no such option: ${option}" >&2
    echo
    usage 1 >&2
    ;;
  esac
done

# Set colored output for TTY
if [ -t 1 ]; then
  color="\e[1;32m"
  fail_color="\e[1;33m"
  reset="\e[0m"
else
  color=""
  fail_color=""
  reset=""
fi

if [ -n "$NOOP" ] && [ -n "$QUIET" ]; then
  QUIET=""
  print_colored "Both --noop and --quiet given; ignoring --quiet" >&2
fi

TARGET_ENVS="${ARGUMENTS[*]}"
if [ "${#ARGUMENTS[@]}" -eq 0 ]; then
  # set all envs when no args are given
  TARGET_ENVS=$(get_allenvs)
fi

for env in $TARGET_ENVS; do
  ENV_ROOT_VALUE=$(echo "${env}_ROOT" | tr '[:lower:]' '[:upper:]')
  ENV_ROOT_VALUE=$(eval echo "\${${ENV_ROOT_VALUE}:-\$($env root)}")
  
  cd "$ENV_ROOT_VALUE"
  anyenv_update "$env"
  [ -n "$WITHOUT_PLUGIN" ] || anyenv_update_plugins "$env"
done
